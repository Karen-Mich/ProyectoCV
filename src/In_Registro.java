
import Clases.Conexion;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Cortez Sebastian
 */
public class In_Registro extends javax.swing.JFrame {

    private String cedulaEmpleado;
    private Date horaEntradaManana;
    private Date horaEntradaTarde;
    private DefaultTableModel modeloTabla;
    private final ZoneId zonaHoraria = ZoneId.of("America/Bogota");
    private Conexion conn = new Conexion();

    public In_Registro() throws SQLException {
        initComponents();
        setLocationRelativeTo(null);
        iniciarReloj();
        modeloTabla = (DefaultTableModel) jtbRegistro.getModel();
        lbFecha.setText(obtenerFechaActual());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jlblReloj = new javax.swing.JLabel();
        jbtnCancelar = new javax.swing.JButton();
        jbtnRegistrarSalida = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbRegistro = new javax.swing.JTable();
        jbtnRegistrarEntrada = new javax.swing.JButton();
        lbFecha = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(227, 227, 206));
        jPanel1.setLayout(null);

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jLabel2);
        jLabel2.setBounds(260, 20, 340, 90);

        jlblReloj.setBackground(new java.awt.Color(163, 8, 8));
        jlblReloj.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jlblReloj.setForeground(new java.awt.Color(255, 255, 255));
        jlblReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblReloj.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jlblReloj.setOpaque(true);
        jPanel1.add(jlblReloj);
        jlblReloj.setBounds(260, 60, 340, 50);

        jbtnCancelar.setBackground(new java.awt.Color(51, 51, 51));
        jbtnCancelar.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jbtnCancelar.setForeground(new java.awt.Color(204, 204, 204));
        jbtnCancelar.setText("Cancelar");
        jbtnCancelar.setBorder(null);
        jbtnCancelar.setContentAreaFilled(false);
        jbtnCancelar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(jbtnCancelar);
        jbtnCancelar.setBounds(510, 130, 130, 60);

        jbtnRegistrarSalida.setBackground(new java.awt.Color(51, 51, 51));
        jbtnRegistrarSalida.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jbtnRegistrarSalida.setForeground(new java.awt.Color(204, 204, 204));
        jbtnRegistrarSalida.setText("Registrar Salida");
        jbtnRegistrarSalida.setBorder(null);
        jbtnRegistrarSalida.setContentAreaFilled(false);
        jbtnRegistrarSalida.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnRegistrarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRegistrarSalidaActionPerformed(evt);
            }
        });
        jPanel1.add(jbtnRegistrarSalida);
        jbtnRegistrarSalida.setBounds(370, 130, 140, 60);

        jtbRegistro.setBackground(new java.awt.Color(227, 227, 206));
        jtbRegistro.setForeground(new java.awt.Color(51, 51, 51));
        jtbRegistro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cedula", "Registro", "Entrada", "Salida"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbRegistro.setShowGrid(true);
        jScrollPane1.setViewportView(jtbRegistro);
        Color miColor = new Color(163,8,8);
        JTableHeader tableHeader = jtbRegistro.getTableHeader();

        tableHeader.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setOpaque(true); // Hacer que el label sea opaco
                label.setBackground(miColor); // Establecer el color de fondo del encabezado
                label.setHorizontalAlignment(SwingConstants.CENTER);
                label.setForeground(Color.WHITE);
                return label;
            }
        });
        if (jtbRegistro.getColumnModel().getColumnCount() > 0) {
            jtbRegistro.getColumnModel().getColumn(0).setResizable(false);
            jtbRegistro.getColumnModel().getColumn(1).setResizable(false);
            jtbRegistro.getColumnModel().getColumn(2).setResizable(false);
            jtbRegistro.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 220, 820, 140);

        jbtnRegistrarEntrada.setBackground(new java.awt.Color(51, 51, 51));
        jbtnRegistrarEntrada.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jbtnRegistrarEntrada.setForeground(new java.awt.Color(204, 204, 204));
        jbtnRegistrarEntrada.setText("Registrar Entrada");
        jbtnRegistrarEntrada.setBorder(null);
        jbtnRegistrarEntrada.setContentAreaFilled(false);
        jbtnRegistrarEntrada.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbtnRegistrarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRegistrarEntradaActionPerformed(evt);
            }
        });
        jPanel1.add(jbtnRegistrarEntrada);
        jbtnRegistrarEntrada.setBounds(220, 130, 150, 60);

        lbFecha.setBackground(new java.awt.Color(163, 8, 8));
        lbFecha.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lbFecha.setForeground(new java.awt.Color(255, 255, 255));
        lbFecha.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbFecha.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbFecha.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        lbFecha.setOpaque(true);
        jPanel1.add(lbFecha);
        lbFecha.setBounds(260, 20, 340, 40);

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 130, 880, 60);

        jLabel3.setBackground(new java.awt.Color(163, 8, 8));
        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Â© Grupo 5 - Control de Empleados");
        jLabel3.setOpaque(true);
        jPanel1.add(jLabel3);
        jLabel3.setBounds(0, 420, 880, 60);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jbtnRegistrarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRegistrarSalidaActionPerformed
        registrarSalida();
    }//GEN-LAST:event_jbtnRegistrarSalidaActionPerformed

    private void jbtnRegistrarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRegistrarEntradaActionPerformed
        try {
            registrarEntrada();
        } catch (SQLException ex) {
            Logger.getLogger(In_Registro.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtnRegistrarEntradaActionPerformed

    private void jbtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCancelarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbtnCancelarActionPerformed
    private void registrarEntrada() throws SQLException {
        if (horaEntradaManana == null) {
            ZonedDateTime horaActual = obtenerHoraEcuador(zonaHoraria);
            String horaEntradaStr = horaActual.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            //String horaEntradaStr = conn.obtenerHoraBD();
            
            String jornada = obtenerJornadaActual();
            
            if (jornada != null) {
                try {
                    Connection con = conn.conexion();
                    String query = "INSERT INTO registros_asistencia (CED_EMP_ASI, FEC_ASI) VALUES (?, ?)";
                    PreparedStatement pst = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                    pst.setString(1, cedulaEmpleado);
                    pst.setString(2, obtenerFechaActual());
                    pst.executeUpdate();

                    ResultSet rs = pst.getGeneratedKeys();
                    int idAsistencia = 0;
                    if (rs.next()) {
                        idAsistencia = rs.getInt(1);
                    }

                    query = "INSERT INTO jornada (ID_ASI_PER, FEC_HOR_ING, JORNADA) VALUES (?, ?, ?)";
                    pst = con.prepareStatement(query);
                    pst.setInt(1, idAsistencia);
                    pst.setString(2, horaEntradaStr);
                    pst.setString(3, jornada);
                    pst.executeUpdate();

                    con.close();

                    JOptionPane.showMessageDialog(this, "Registro de entrada exitoso.", "Ãxito", JOptionPane.INFORMATION_MESSAGE);

                    reiniciarVariables();

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al actualizar la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Fuera del horario de trabajo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ya ha registrado la entrada en la jornada de la maÃ±ana.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String obtenerJornadaActual() {
        ZonedDateTime horaHoraria = obtenerHoraEcuador(zonaHoraria);
        int horaActual = horaHoraria.getHour();

        if (horaActual >= 8 && horaActual < 13) {
            return "M";
        } else if (horaActual >= 14 && horaActual < 17) {
            return "T";
        } else {
            return null;
        }
    }

//    private String obtenerFechaActual() {
//        ZonedDateTime fechaActual = obtenerHoraEcuador(zonaHoraria);
//        DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");
//        String fechaStr = fechaActual.format(formatoFecha);
//        return fechaStr;
//    }
     private String obtenerFechaActual() throws SQLException {
        Conexion con = new Conexion();
        String fecha = con.obtenerFechaBD();
        return fecha;
    }

    private void registrarSalida() {
        if (horaEntradaManana != null && horaEntradaTarde != null) {
            ZonedDateTime horaSalida = obtenerHoraEcuador(zonaHoraria);
            String horaSalidaStr = horaSalida.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            //String horaSalidaStr = conn.obtenerHoraBD();
            
            long minutosTrabajados = (horaSalida.toInstant().toEpochMilli() - horaEntradaManana.toInstant().toEpochMilli()
                    + horaSalida.toInstant().toEpochMilli() - horaEntradaTarde.toInstant().toEpochMilli()) / (60 * 1000);

            double descuento = calcularDescuento(minutosTrabajados);
            double sueldoFinal = 800 - descuento;

            try {
                Connection con = conn.conexion();
                String query = "UPDATE jornada SET FEC_HOR_SAL = ?, DESCUENTO_MIN = ? WHERE ID_ASI_PER = ?";
                PreparedStatement pst = con.prepareStatement(query);
                pst.setString(1, horaSalidaStr);
                pst.setDouble(2, descuento);
                pst.setInt(3, obtenerIdAsistenciaActual());
                pst.executeUpdate();

                query = "UPDATE empleados SET SUE_EMP_FINAL = ? WHERE CED_EMP = ?";
                pst = con.prepareStatement(query);
                pst.setDouble(1, sueldoFinal);
                pst.setString(2, cedulaEmpleado);
                pst.executeUpdate();

                con.close();

                JOptionPane.showMessageDialog(this, "Registro de salida exitoso.\nDescuento: $" + descuento
                        + "\nSueldo final: $" + sueldoFinal, "Ãxito", JOptionPane.INFORMATION_MESSAGE);

                reiniciarVariables();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe registrar la entrada antes de la salida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void reiniciarVariables() {
        horaEntradaManana = null;
        horaEntradaTarde = null;
        cedulaEmpleado = null;
    }

    private double calcularDescuento(long minutosTrabajados) {

        return 0.25 * minutosTrabajados;
    }

    private int obtenerIdAsistenciaActual() {
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        int idAsistencia = 0;

        try {
            con = conn.conexion();
            String fechaActual = obtenerHoraEcuador(zonaHoraria).toLocalDate().toString();

            String query = "SELECT ID_ASI FROM registros_asistencia WHERE CED_EMP_ASI = ? AND FEC_ASI = ?";
            pst = con.prepareStatement(query);
            pst.setString(1, cedulaEmpleado);
            pst.setString(2, fechaActual);
            rs = pst.executeQuery();

            if (rs.next()) {
                idAsistencia = rs.getInt("ID_ASI");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al obtener el ID de asistencia.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return idAsistencia;
    }

    private void iniciarReloj() {
        jlblReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblReloj.setFont(jlblReloj.getFont().deriveFont(24.0f));
        jPanel1.add(jlblReloj);

        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    actualizarHora();
                } catch (SQLException ex) {
                    Logger.getLogger(In_Registro.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        timer.start();
    }

//    private void actualizarHora() {
//        ZonedDateTime horaActual = obtenerHoraEcuador(zonaHoraria);
//        DateTimeFormatter formato = DateTimeFormatter.ofPattern("HH:mm:ss");
//        String horaFormateada = horaActual.format(formato);
//
//        jlblReloj.setText(horaFormateada);
//    }
    private void actualizarHora() throws SQLException {
        Conexion con = new Conexion();
        String horaFormateada = con.obtenerHoraBD();
        jlblReloj.setText(horaFormateada);
    }

    private ZonedDateTime obtenerHoraEcuador(ZoneId zonaHoraria) {
        String urlServicioHora = "http://worldtimeapi.org/api/timezone/" + zonaHoraria.toString();

        try {
            URL url = new URL(urlServicioHora);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String linea;

            while ((linea = reader.readLine()) != null) {
                response.append(linea);
            }
            reader.close();

            String respuestaJSON = response.toString();
            String dateTime = respuestaJSON.split("\"datetime\":\"")[1].split("\"")[0];

            return ZonedDateTime.parse(dateTime);
        } catch (IOException e) {
            e.printStackTrace();
            return ZonedDateTime.now(zonaHoraria);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new In_Registro().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(In_Registro.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JButton jbtnRegistrarEntrada;
    private javax.swing.JButton jbtnRegistrarSalida;
    private javax.swing.JLabel jlblReloj;
    private javax.swing.JTable jtbRegistro;
    private javax.swing.JLabel lbFecha;
    // End of variables declaration//GEN-END:variables
}
