
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author educo
 */
public class In_Registro extends javax.swing.JFrame {

    private String cedulaEmpleado;
    private Date horaEntradaManana;
    private Date horaEntradaTarde;
    private DefaultTableModel modeloTabla;

    public In_Registro() {
        initComponents();
        setLocationRelativeTo(null);
        iniciarReloj();
        modeloTabla = (DefaultTableModel) jtbRegistro.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jlblReloj = new javax.swing.JLabel();
        jbtnCancelar = new javax.swing.JButton();
        jbtnRegistrarSalida = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbRegistro = new javax.swing.JTable();
        jbtnRegistrarEntrada = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jlblReloj.setFont(new java.awt.Font("Raleway Black", 0, 36)); // NOI18N

        jbtnCancelar.setText("Cancelar");

        jbtnRegistrarSalida.setText("Registrar Salida");
        jbtnRegistrarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRegistrarSalidaActionPerformed(evt);
            }
        });

        jtbRegistro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Cedula", "Registro", "Entrada", "Salida"
            }
        ));
        jScrollPane1.setViewportView(jtbRegistro);

        jbtnRegistrarEntrada.setText("Registrar Entrada");
        jbtnRegistrarEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnRegistrarEntradaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(jbtnRegistrarEntrada)
                .addGap(65, 65, 65)
                .addComponent(jbtnRegistrarSalida)
                .addGap(78, 78, 78)
                .addComponent(jbtnCancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 38, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlblReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(315, 315, 315))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnRegistrarEntrada)
                    .addComponent(jbtnRegistrarSalida)
                    .addComponent(jbtnCancelar))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jlblReloj, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(145, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 880, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jbtnRegistrarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRegistrarSalidaActionPerformed
        registrarSalida();
    }//GEN-LAST:event_jbtnRegistrarSalidaActionPerformed

    private void jbtnRegistrarEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnRegistrarEntradaActionPerformed
       registrarEntrada();
    }//GEN-LAST:event_jbtnRegistrarEntradaActionPerformed
    private void registrarEntrada() {
        if (horaEntradaManana == null) {
            Date horaEntrada = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String horaEntradaStr = sdf.format(horaEntrada);

            String jornada = obtenerJornadaActual();

            if (jornada != null) {
                try {
                    Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/tu_base_de_datos", "tu_usuario", "tu_contraseña");

                    String query = "INSERT INTO registros_asistencia (CED_EMP_ASI, FEC_ASI) VALUES (?, ?)";
                    PreparedStatement pst = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                    pst.setString(1, cedulaEmpleado);
                    pst.setString(2, obtenerFechaActual());
                    pst.executeUpdate();

                    ResultSet rs = pst.getGeneratedKeys();
                    int idAsistencia = 0;
                    if (rs.next()) {
                        idAsistencia = rs.getInt(1);
                    }

                    query = "INSERT INTO jornada (ID_ASI_PER, FEC_HOR_ING, JORNADA) VALUES (?, ?, ?)";
                    pst = con.prepareStatement(query);
                    pst.setInt(1, idAsistencia);
                    pst.setString(2, horaEntradaStr);
                    pst.setString(3, jornada);
                    pst.executeUpdate();

                    con.close();

                    JOptionPane.showMessageDialog(this, "Registro de entrada exitoso.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

                    reiniciarVariables();

                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al actualizar la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Fuera del horario de trabajo.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ya ha registrado la entrada en la jornada de la mañana.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private String obtenerJornadaActual() {
        SimpleDateFormat sdfHora = new SimpleDateFormat("HH");
        int horaActual = Integer.parseInt(sdfHora.format(new Date()));

        if (horaActual >= 8 && horaActual < 13) {
            return "M";
        } else if (horaActual >= 14 && horaActual < 17) {
            return "T";
        } else {
            return null;
        }
    }

    private String obtenerFechaActual() {
        SimpleDateFormat sdfFecha = new SimpleDateFormat("yyyy-MM-dd");
        return sdfFecha.format(new Date());
    }

    private void registrarSalida() {
        if (horaEntradaManana != null && horaEntradaTarde != null) {
            Date horaSalida = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            String horaSalidaStr = sdf.format(horaSalida);

            long minutosTrabajados = (horaSalida.getTime() - horaEntradaManana.getTime()
                    + horaSalida.getTime() - horaEntradaTarde.getTime()) / (60 * 1000);

            double descuento = calcularDescuento(minutosTrabajados);
            double sueldoFinal = 800 - descuento;

            try {
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/tu_base_de_datos", "tu_usuario", "tu_contraseña");
                String query = "UPDATE jornada SET FEC_HOR_SAL = ?, DESCUENTO_MIN = ? WHERE ID_ASI_PER = ?";
                PreparedStatement pst = con.prepareStatement(query);
                pst.setString(1, horaSalidaStr);
                pst.setDouble(2, descuento);
                pst.setInt(3, obtenerIdAsistenciaActual());
                pst.executeUpdate();

                query = "UPDATE empleados SET SUE_EMP_FINAL = ? WHERE CED_EMP = ?";
                pst = con.prepareStatement(query);
                pst.setDouble(1, sueldoFinal);
                pst.setString(2, cedulaEmpleado);
                pst.executeUpdate();

                con.close();

                JOptionPane.showMessageDialog(this, "Registro de salida exitoso.\nDescuento: $" + descuento
                        + "\nSueldo final: $" + sueldoFinal, "Éxito", JOptionPane.INFORMATION_MESSAGE);

                reiniciarVariables();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe registrar la entrada antes de la salida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void reiniciarVariables() {
        horaEntradaManana = null;
        horaEntradaTarde = null;
        cedulaEmpleado = null;
    }

    private double calcularDescuento(long minutosTrabajados) {

        return 0.25 * minutosTrabajados;
    }

    private int obtenerIdAsistenciaActual() {
        Connection con = null;
        PreparedStatement pst = null;
        ResultSet rs = null;
        int idAsistencia = 0;

        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/tu_base_de_datos", "tu_usuario", "tu_contraseña");

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String fechaActual = sdf.format(new Date());

            String query = "SELECT ID_ASI FROM registros_asistencia WHERE CED_EMP_ASI = ? AND FEC_ASI = ?";
            pst = con.prepareStatement(query);
            pst.setString(1, cedulaEmpleado);
            pst.setString(2, fechaActual);
            rs = pst.executeQuery();

            if (rs.next()) {
                idAsistencia = rs.getInt("ID_ASI");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al obtener el ID de asistencia.", "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pst != null) {
                    pst.close();
                }
                if (con != null) {
                    con.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return idAsistencia;
    }

    private void iniciarReloj() {
        jlblReloj.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblReloj.setFont(jlblReloj.getFont().deriveFont(24.0f));
        jPanel1.add(jlblReloj);

        Timer timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                actualizarHora();
            }
        });

        timer.start();
    }

    private void actualizarHora() {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        String horaActual = sdf.format(new Date());
        jlblReloj.setText(horaActual);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(In_Registro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new In_Registro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtnCancelar;
    private javax.swing.JButton jbtnRegistrarEntrada;
    private javax.swing.JButton jbtnRegistrarSalida;
    private javax.swing.JLabel jlblReloj;
    private javax.swing.JTable jtbRegistro;
    // End of variables declaration//GEN-END:variables
}
